---
title: "In-class Exercise"
editor: visual
---

## Overview

This is In-Class Exercise 1

## Getting Started

The code chunk below will install and load tidyverse, spdep, tmap and sf packages.

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep)


```

## Importing Geospatial Data

Importing polygon features

This code chunk will import ESRI shapefile into R.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")

```

Importing attribute data in csv

```{r}
hunan2012 = read_csv("data/aspatial/Hunan_2012.csv")

```

Update the attribute table of Hunan's Spatial Polygons Data Frame with the attribute fields of Hunan 2012 Data Frame, using left_join()

```{r}
hunan <- left_join(hunan,hunan2012)
```

Basemap and Choropleth map to show the distribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

To compute the Queen contiguity weight index.

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

See neighbours for the first polygon.

```{r}
wm_q[[1]]
```

County name of Polygon ID=1.

```{r}
hunan$County[1]
```

County names of the five neighbouring polygons.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

GDPPC of the five counties.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display complete weight matrix.

```{r}
str(wm_q)
```

Compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

Obtain longtitude values from first value of each centroid.

```{r}
longtitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Obtain latitude values from second value of each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Bind longtitude and latitude in the same object.

```{r}
coords <- cbind(longtitude, latitude)
```

Check obserations format

```{r}
head(coords)
```

Plotting Queen contiguity based neighbours map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add = TRUE, col = "RED")
```

Plotting Rook contiguity based neighbours map.

```{r}
plot(hunan$geometry, boder="lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add = TRUE, col = "RED")
```

Plotting Queen and Rook contiguity neighbours maps.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main = "Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main = "Rook Contiguity")
```

Determine the upper limit for distance band by using the steps:

1.  Return a matrix with indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.

2.  Convert the knn object returned by knearneigh() into neighbour list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nd().

3.  Return the length of neighbour relationhsip edges by using nbdist() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

4.  Remove the list structure of the returned object by using unlist().

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Compute distance weight matrix using dnearneigh().

```{r}
wm_d62 <- dnearneigh(coords, 0 ,62, longlat = TRUE)
wm_d62
```

Display the content of wm_d62 weight matrix using str().

```{r}
str(wm_d62)
```

Combine table() and card() of spdep to display the structure of the weight matrix.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

Plot distance weight matrix.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add = TRUE)
plot(k1, coords, add = TRUE, col="red", length=0.08)
```

Plot both next to each other.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add = TRUE, col="red", length= 0.08, main = "1st nearest neighbour")
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, pch = 19, cex = 0.6, main = "Distance linl")
```

Control the number of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Display the contents of the matrix using str().

```{r}
str(knn6)
```

Plot the weight matrix.

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(knn6, coords, pch=19, cex=0.6, add=TRUE, col="red")
```

Derive spatial weight matrix based on Inversed Distance method.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

Assign weights to each neighbouring polygon.

```{r}
rswm_q = nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

See the weight of the first polygon's four neighbours type.

```{r}
rswm_q$weights[10]
```

Derive a row standardised distance weight matrix.

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[10]
```

Derive a row standarised distance weight matrix.

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

Compute the average neighbour GDPCC value for each polygon.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Retrieve the GDPPC of the five counties.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Append spatially lag GDPPC values onto Hunan sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan, lag.res)
head(hunan)
```

Plot both the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)
```

Calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires our neighbour list, apply a function that will asign binary weights, then we use glist=in the nb2list to explicitly assign these weights. Assign a value of 1 each neighbour using lapply to manipulate the neighbours structure throughout the past notebooks.

```{r}
b_weights <- lapply(wm_q, function(x)0*x + 1)
b_weights2 <- nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

Use lag.listw to compute a lag variable from our weight and GDPCC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

Append tge lag_sum GDPPC field into Hunan sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both the GDPPC and Spatial Lag Sum GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

Assign k6 to a new variable to alter its structure to add the diagonal elements. Add the diagonal element to the neighbour list using include.self() from spdep.

```{r}
wm_q1 <- wm_q
include.self(wm_q1)
```

Obtain weights with nb2listw().

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create the lag variable from our weight structure and GDPCC variable

```{r}
lag_w_avg_gdpc <- lag.listw(wm_q1, hunan$GDPPC)
lag_w_avg_gdpc
```

Convert the lag variable listw object into a data.frame.

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Append lag_window_avg GDPPC values onto Hunan sf data,frame.

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Plot GDPPC and lag_window_avg GDPPC map.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp = 1, ncol = 2)
```

Assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbour list.

```{r}
include.self(wm_q1)
wm_q1
```

Assign the binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x +1)
b_weights[1]
```

Use nb2listw() and glist() to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_q1, glist = b_weights, style = "B")
b_weights2
```

Compute the lag variable.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDCC")
```

Append w_sum GDPPC values onto Hunan sf data.frame.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plot GDPPC and lag_sum GDPPC map.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
