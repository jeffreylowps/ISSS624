---
title: "Hands-On_Exercise 3"
editor: visual
---

## Overview

This is Hands-On Exercise 3

## Getting Started

The R packages needed for this exercise are as follow,

-   Spatial Data Handling

    sf, rgdal, and spdep

-   Attribute Data Handling

    tidyverse, especially readr, ggplot2, dplyr

-   Choropleth mapping

    tmap

-   Multivariate Data Visualisation and Analysis

    coorplot, ggpubr and heatmaply

-   Cluster Analysis

    cluster ClustGeo

The code chunk below will install and launch these R packages into the R environment.

```{r}
pacman::p_load(rgdal, spdep, tidyverse, tmap, sf, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych)
```

In this section, I will import the Myanmar Township Boundary GIS data and its associated attribute table into R environment by using the st_read() function of sf.

The code chunk used are shown below.

```{r}
shan_sf <- st_read(dsn = "data/geospatial", layer = "myanmar_township_boundaries") %>% filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
```

The imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple feature data.frame by using the code chunk below.

```{r}
shan_sf
```

Notice that the sf.data.frame is conformed to Hardy Wickham's tidy framework.

Since shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of its fields.

```{r}
glimpse(shan_sf)
```

## Importing aspatial data into R environment

The csv file will be imported using read_csv function of readr package.

The code chunk used is shown below.

```{r}
ict <- read_csv("data/aspatial/Shan-ICT.csv")
```

The imported InfoComm are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It's saved in R's tibble data.frame format.

The code chunk below reveals the summary statistics of the ict data.frame.

```{r}
summary(ict)
```

**Derive new variables using dplyr package**

The unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher number of households will also have higher number of households owning radio, TV, etc.

In order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` = `District Pcode`, `DT` = `District Name`, `TS_PCODE` = `Township Pcode`, `TS` = `Township Name`, `TT_HOUSEHOLDS` = `Total households`, `RADIO` = `Radio`, `TV` = `Television`, `LLPHONE` = `Land line phone`, `MPHONE` = `Mobile phone`, `COMPUTER` = `Computer`, `INTERNET` = `Internet at home`)
```

The code chunk below reviews the summary statistics of the newly derived penetration rates.

```{r}
summary(ict_derived)
```

Notice that there are six new fields added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, COMPUTER_PR and INTERNET_PR.

## Exploratory Data Analysis

**EDA using statistical graphs**

We can plot the distribution of the variables (i.e. Number of households with radios) by using appropriate Exploratory Data Analysis (EDA) as show in the code chunk below.

Histogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)

```{r}
ggplot(data = ict_derived, aes(x=`RADIO`)) + geom_histogram(bins = 20, color="black", fill="light blue")
```

Boxplot is useful to detect outliers.

```{r}
ggplot(data = ict_derived, aes(x= `RADIO`)) + geom_boxplot(color="black", fill="light blue")
```

Next we will be plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.

```{r}
ggplot(data = ict_derived, aes(x=`RADIO_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
```

```{r}
ggplot(data = ict_derived, aes(x=`RADIO_PR`)) + geom_boxplot(color="black", fill="light blue")
```

The code chunks below are used to create the data visualisation of multiple histograms plotted to reveal the the distribution of the selected variables in the ict_derived data.frame. They consist of two main parts. First, we will create the individual histogram using the code chunk below.

```{r}
radio <- ggplot(data = ict_derived, aes(x=`RADIO_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
tv <- ggplot(data = ict_derived, aes(x=`TV_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
llphone <- ggplot(data = ict_derived, aes(x=`LLPHONE_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
mphone <- ggplot(data = ict_derived, aes(x=`MPHONE_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
computer <- ggplot(data = ict_derived, aes(x=`COMPUTER_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
internet <- ggplot(data = ict_derived, aes(x=`INTERNET_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue")
```

Next the ggarange() function of ggpubr package is used to group these histograms together.

```{r}
ggarrange(radio, tv, llphone, mphone, computer, internet, ncol = 3, nrow = 2)
```

**EDA using choropleth map**

**Joining geospatial data with aspatial data**

Before we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base object and the ict_derived data.frame will be used as the join table.

The code chunk below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.

```{r}
shan_sf <- left_join(shan_sf, ict_derived, by=c("TS_PCODE" = "TS_PCODE"))
```

The message above shows that TS_PCODE field is the common field used to perform the left_join.

It is important to note that there is no new data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.

**Preparing a choropleth map**

To have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.

The code chunk below is used to choropleth by using the qtm() function of tmap package.

```{r}
qtm(shan_sf, "RADIO_PR")
```

In order to reveal the distribution shown in the choropleth map above is bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of households with Radio (RADIO.map) by using the code chunk below.

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + tm_fill(col = "TT_HOUSEHOLDS", n = 5, style = "jenks", title = "Total households") + tm_borders(alpha = 0.5)
RADIO.map <- tm_shape(shan_sf) + tm_fill(col = "RADIO", n=5, style = "jenks", title = "Number Radio") + tm_borders(alpha = 0.5)
tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map, asp = NA, ncol = 2)
```

Notice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.

Now let us plot choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.

```{r}
tm_shape(shan_sf) + tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"), style="jenks") + tm_facets(sync = TRUE, ncol = 2) + tm_legend(legend.position = c("right", "bottom")) + tm_layout(outer.margins = 0, asp = 0)
```

**Correlation Analysis**

Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.

In this section, we will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor, lower = "ellipse", upper = "number", tl.pos = "lt", diag = "l", tl.col="black")
```

The correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggests that only one of them should be used in the cluster analysis instead of both.

**Hierarchy Cluster Analysis**

In this section, we will learn how to perform hierarchical cluster analysis. The analysis consist of four major steps:

**Extracting clustering variables**

The code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.

```{r}
cluster_vars <- shan_sf %>% st_set_geometry(NULL) %>% select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars, 10)
```

Notice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.

Next, we need to change the rows by township name instead of row number by using the code chunk below.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

Notice that the row number has been changed to township name. Now we will delete the TS.x field by using the code chunk below.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

**Data Standardisation**

In general, multiple variables will be used for cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis being biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.

**Min-Max Standardisation**

In the code chunk below, normalize() of heatmaply package is used to standarise the clustering variables by using Min-Mx method. The summary() is then used to display the summary statistics of the standardised clustering variables.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

Notice that the values range of the Min-Max standardised clustering variables are 0-1 now.

**Z-score standardisation**

Z-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to standardise the clustering variables by using Z-score method.

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

Notice that the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.

Note: describe() of psych package is used her instead of summary() of Base R because the earlier provides standard deviation.

**Visualing the standard clustering variables.**

Beside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.

The code chunk below plot the scaled RADIO_PR field.

```{r}
r <- ggplot(data = ict_derived, aes(x = `RADIO_PR`)) + geom_histogram(bins = 20, color = "black", fill="light blue")
shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data = shan_ict_s_df, aes(x=`RADIO_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue") + ggtitle("Min-Max Standardisation")
shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data = shan_ict_z_df, aes(x=`RADIO_PR`)) + geom_histogram(bins = 20, color="black", fill="light blue") + ggtitle("Z-score Standardisation")

ggarrange(r, s, z, ncol = 3, nrow = 1)
```

Notice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is not advisable to perform data standardisation if the values range of the clustering variables are not very large.

**Computing proximity matrix**

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.

dist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary, minkowski. The default is eculidean proximity matrix.

The code chunk below is used to compute the proximity matrix using euclidean method.

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
```

The code chunk below can then be used to list the content of proxmat for visual inspection.

```{r}
proxmat
```

**Computing hierarchical clustering**

In R, there are several packages that provide the hierarchical clustering . In this hands-on exercise, hclust() of R stats will be used.

hclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which decribes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

We can then plot the tree by using plot() of R Graphics as shown in the code chunk below.

```{r}
plot(hclust_ward, cex=0.6)
```

**Selecting the optimal clustering algorithm**

One of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclust(), however with the agnes() function, you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

With reference to the output above, we can see that Ward's method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward's method will be used.

**Determining Optimal Clusters**

Another technical challenge face by data analyst performing clustering analysis is to determine the optimal clusters to retain.

There are three commonly used methods to determine the optimal clusters, they are: Elbow Method Average Silhouette Method Gap Statistic Method

Gap Statistic Method The gap statistic method compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be the value that maximise the gap statistic (i.e. that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

To compute the gap statistic, clusGap() of cluster package will be used.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, FUN= hcut, nstart=25, K.max = 10, B=50)
print(gap_stat, method="firstmax")
```

Also note that the hcut function used is from the factoextra package.

Next, we can visualise the plot by using fviz_gap_stat of factoextra package.

```{r}
fviz_gap_stat(gap_stat)
```

With reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is no logical to retain only one cluster. By examining the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.

**Interpreting the dendrograms**

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The height of the fusion provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

It's also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colours for the rectangles.

```{r}
plot(hclust_ward, cex=0.6)
rect.hclust(hclust_ward, k=6, border = 2:5)
```

**Visually-driven hierarchical clustering analysis**

In this section, we will learn how to perform visually-driven hierarchical clustering analysis by using heatmaply package.

With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.

**Transforming the data frame into a matrix**

The data was loaded into a data frame, but it has to be a data matrix to make your heatmap.

The code chunk below will be used to transform shan_ict data frame into a data matrix.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

**Plotting interactive cluster heatmap using heatmaply()**

In the code chunk below, the heatmaply() of heatmaply package is used to build a interactive cluster heatmap.

```{r}
heatmaply(normalize(shan_ict_mat), Colv=NA, dist_method = "euclidena", hclust_method = "ward.D", seriate = "OLO", colors = Blues, k_row = 6, margins= c(NA, 200, 60, NA), fontsize_row=4, fontsize_col=5, main="Geographic Segmentation of Shan State by ICT indicators", xlab = "ICT indicators", ylab = "Townships of Shan State")
```

**Mapping the clusters formed**

With close examination of the dendrogram above, we have decided to retina six clusters.

cutree() of R Base will be used in this code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The output is called groups. It is a list object.

In order to visualise the clusters, the group object needs to be appended onto shan_sf simple feature object.

The code chunk below form the join in three steps: the groups list object will be converted into a matrix cbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and rename of dplyr package is used to rename as.matrix.groups field as CLUSTER.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% rename(`CLUSTER` = `as.matrix.groups.`)
```

Next, qtm() of tmap package is used to plot choropleth map showing the cluster formed.

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

The choropleth map above reveals the clusters are very fragmented. This is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

**Spatially Constrained Clustering - SKATER approach**

In this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.

**Converting into Spatial Polygons Data Frame**

First, we need to convert shan_sf into Spatial Polygon Data Frame. This is because SKATER function only support sp objects such as Spatial Polygon Data Frame.

The code chunk below uses as_Spatial() of sf package to convert shan_sf into a Spatial Polygon Data Frame called shan_sp.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

**Computing Neighbour List**

Next, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

We can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we can plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbour list object, with coordinates applied to the original Spatial Polygon Data Frame (Shan state township boundaries) to extract centroids of the polygons. These are used as the nodes for the graph representation. We also set the colour to blue and specify add=TRUE to plot the network on top of the boundaries.

```{r}
plot(shan_sp, border=grey(.5))
plot(shan.nb, coordinates(shan_sp), col="blue", add=TRUE)
```

Note that if you plot the network first then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary maps extends further than the graph, we plot it first.

**Computing minimum spanning tree**

Calculating edge costs Next, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between its nodes. This function computes the distance using a data frame with observations vector in each node.

The code chunk below is used to compute the cost each edge.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.

Next we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list weights object by specifying the just computed lcosts as the weights.

In order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.

Note that we specify the style as B to make sure the cost values are not row standardised.

```{r}
shan.w <- nb2listw(shan.nb, lcosts, style = "B")
summary(shan.w)
```

**Computing minimum spanning tree**

The minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.

```{r}
shan.mst <- mstree(shan.w)
```

After computing the MST, we can check its class and dimension by using the code chunk below.

```{r}
class(shan.mst)
```

```{r}
dim(shan.mst)
```

Note that the dimension is 54 not 55, because the minimum spanning tree consists of n-1 edges (links) in order to traverse all the nodes.

We can display the content of shan.mst by using head() as shown in the code chunk below.

```{r}
head(shan.mst)
```

The plot for MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, coordinates(shan_sp), col="blue", cex.labels = 0.7, cex.circles = 0.005, add = TRUE)
```

**Computing spatially constrained clusters using SKATER method**

The code chunk below compute the spatially constrained cluster using skater() of spdep package.

```{r}
clust6 <- skater(edges = shan.mst[,1:2], data = shan_ict, method = "euclidean", ncuts = 5)
```

The skater() takes three mandatory arguments:- the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So the value specified is not the number of clusters but the number of cuts in the graph, one less than the clusters.

The result of the skate() is an object of class skater. We can examine its contents by using the code chunk below.

```{r}
str(clust6)
```

The most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitrary). This is followed by a detailed summary for each of the clusters in edges.groups list. Sum of squares measures are given as ssto and ssw to show the effect of each of the cuts on the overall criterion.

We can check the cluster assignment by the code chunk below.

```{r}
ccs6 <- clust6$groups
ccs6
```

We can find out how many observations are in each cluster by means of the table command. Parenthetically, we can also find this as the dimensions of each vector in the lists contained in edges.group. For example, the first line has node with dimension 12, which is also the number of observations in the first cluster.

```{r}
table(ccs6)
```

Lastly, we can plot the pruned tree that shows the five clusters on top of the township area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

**Visualising the clusters in choropleth map**

The code chunk below is used to plot the newly derived clusters using SKATER method.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>% rename(`SP_CLUSTER` = `as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

For easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.

```{r}
hclust.map <- qtm(shan_sf_cluster, "CLUSTER") + tm_borders(alpha = 0.5)
shclust.map <- qtm(shan_sf_spatialcluster, "SP_CLUSTER") + tm_borders(alpha = 0.5)
tmap_arrange(hclust.map,shclust.map, asp = NA, ncol = 2)
```
