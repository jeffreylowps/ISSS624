---
title: "Hands-on Exercise 2"
editor: visual
---

Overview

This is Hands-on Exercise 2

Getting Started

The code chunk below will install and load tidyverse, spdep, tmap and sf packages.

```{r}
pacman::p_load(sf, spdep, tidyverse, tmap)
```

Importing Gespatial Data

Importing polygon features

This code chunk will import ESRI shapefile into R.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

Importing attribute data in csv.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

Update the attribute table of Hunan's Spatial Polygons Data Frame with the attribute fields of Hunan2012 dataframe.

```{r}
hunan <- left_join(hunan, hunan2012)
```
Prepare a basemap and a choropleth map showing the distribution of GDPPC 2012.

```{r}
equal <- tm_shape(hunan) + tm_fill("GDPPC", n=5, style = "equal") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) + tm_fill("GDPPC", n=5, style = "quantile") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, quantile, asp = 1, ncol = 2)
```

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

Assign weights to each neighbouring polygon.  This is accomplished by assigning the fraction 1/(# of neighbours) to each neighbouring county then summing the weighted income values.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```
The code chunk below performs Moran's I statistical testing using moran.test() of spdep.

```{r}
moran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)
```
The code chunk below performs permutation test for Moran's I statistic by using moran.mc() of spdep.  A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)
bperm
```

The code chunk below plot the distribution of the statistical values as a histogram.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Moran's I")
abline(v=0, col="red")
```

The code chunk below performs Geary's C test spatial autocorrelation by using geary.test() of spdep.

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

The code chunk below performs permutation test for Geary's C statistic by using geary.mc() of spdep.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, listw = rswm_q, nsim = 999)
bperm
```

The code chunk below plot a histogram to reveal the distribution of the simulated values.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Geary C")
abline(v=1, col="red")
```

In the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC.

```{r}
MI_corr <- sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = "I", style = "W")
plot(MI_corr)
```

Examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

The code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram pf GDPPC.  The global spatial autocorrelation used in Geary's C.

```{r}
GC_corr <- sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = "C", style = "W")
plot(GC_corr)
```

The code chunk below print out the analysis report.

```{r}
print(GC_corr)
```

The code chunk below is used to compute local Moran's I of GDPPC2012 at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

The code chunk below list the content of the local Moran matrix derived by using printCoefmat().

```{r}
printCoefmat(data.frame(localMI[fips,], row.names = hunan$County[fips]), check.names=FALSE)
```

The code chunk below appends the local Moran's I dataframe (i.e. localMI) onto Hunan Spatial Polygon Data Frame.

```{r}
hunan.localMI <- cbind(hunan, localMI) %>% rename(Pr.Ii = Pr.z....E.Ii..)
```

Using chorpleth mapping functions of tmap package, we can plot the local Moran's I values by using the code chunk below.

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Ii", style = "pretty", palette = "RdBu", title = "local moran statistics") + tm_borders(alpha = 0.5)
```

The code chunk below produce a choropleth map of Moran's I p-values by using functions of tmap package.

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Pr.Ii", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = "-Blues", title = "Local Moran's I p-values") + tm_borders(alpha = 0.5)
```

The code chunk below plot both the local Moran's I values map and its corresponding p-values map.

```{r}
localMI.map <- tm_shape(hunan.localMI) + tm_fill(col = "Ii", style = "pretty", title = "local moran statistics") + tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) + tm_fill(col = "Ii", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = "-Blues", title = "local Moran's I p-values") + tm_borders(alpha = 0.5)
tmap_arrange(localMI.map, pvalue.map, asp = 1, ncol = 2)
```

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q, labels = as.character(hunan$County), xlab = "GDPPC 2012", ylab = "Spatially Lag GDPPC 2012")
```

Use scale() to centers and scales the variable.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector
```

The code chunk below plot the the Moran scatterplot.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q, labels = as.character(hunan$County), xlab = "z-GDPPC 2012", ylab = "Spatially Lag z-GDPPC 2012")
```

The code chunk below shows the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode = "numeric", length = nrow(localMI))
```

We centers the variable of interest around its mean.

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)
```

This is followed by centering the local Moran's around the mean.

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])
```

Set a significance level for the local Moran.

```{r}
signif <- 0.05
```

These four command lines define the high-high, low-low, low-high, high-low categories.

```{r}
quadrant[DV > 0 & C_mI > 0] <- 4
quadrant[DV < 0 & C_mI < 0] <- 1
quadrant[DV < 0 & C_mI > 0] <- 2
quadrant[DV > 0 & C_mI < 0] <- 3
```

Places non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

Build the LISA map by using the code chunk below.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

The code chunk below plot both the local Moran's I values map and its corresponding p-values map.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

To get our longtitude values, we map the st_centroid() function over the geometry column of us.bond and access the longtitude value through double bracket notation[[]] and 1.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude, we access the second value per each centroid with[[2]].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Cbind to put longtitdue and latitude in the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We determine the upper limit for distance band by using the steps below:

1. Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.

2. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().

3. Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

4. Remove the list structure of the returned object by using unlist().

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Compute distance weight matrix by using dnearneigh().

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

nb2listw() is use to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

Control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

nb2listw() is use to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

Gi statistics using fixed distance.

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

Join the Gi values to their corresponding hunan sf data frame.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

